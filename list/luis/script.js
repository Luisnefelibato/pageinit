class LuisTechSystem {
            constructor() {
                // APIs - REALES
                this.GEMINI_API_KEY = 'AIzaSyC2sGWOkbp6Z1xfns5cZWM5Ti8nTPWUBEE';
                this.ELEVENLABS_API_KEY = 'sk_461f0eb94d7fc7f8b2e24f6d6136824392cd88050c27eebc';
                this.ELEVENLABS_VOICE_ID = 'ucWwAruuGtBeHfnAaKcJ';
                
                // Estados principales
                this.isCallActive = false;
                this.isLuisSpeaking = false;
                this.isMicrophoneActive = false;
                this.isProcessingResponse = false;
                
                // Control de audio y reconocimiento
                this.volume = 0.8;
                this.recognition = null;
                this.currentAudio = null;
                this.silenceTimer = null;
                this.microphoneTimer = null;
                this.callStartTime = null;
                this.durationInterval = null;
                
                // Datos de conversaci√≥n
                this.finalTranscript = '';
                this.interimTranscript = '';
                this.conversationHistory = [];
                this.interactionCount = 0;
                this.clientName = null;
                
                this.initializeElements();
                this.setupEventListeners();
                this.initializeVoiceRecognition();
                this.updateCallStatus('ü§ñ Luis IA listo - Sistema de ventas tecnol√≥gicas activado', 'waiting');
                this.updateMicrophoneStatus(false);
                
                console.log('üöÄ Luis Tech System inicializado');
            }

            initializeElements() {
                this.callButton = document.getElementById('callButton');
                this.volumeButton = document.getElementById('volumeButton');
                this.stopButton = document.getElementById('stopButton');
                this.callStatus = document.getElementById('callStatus');
                this.transcriptContent = document.getElementById('transcriptContent');
                this.cursor = document.getElementById('cursor');
                this.audioVisualizer = document.getElementById('audioVisualizer');
                this.micIndicator = document.getElementById('micIndicator');
                this.conversationHistory = document.getElementById('conversationHistory');
                
                this.responseTimeEl = document.getElementById('responseTime');
                this.callDurationEl = document.getElementById('callDuration');
                this.interactionsEl = document.getElementById('interactions');
                this.luisStatusEl = document.getElementById('luisStatus');
            }

            setupEventListeners() {
                this.callButton.addEventListener('click', () => {
                    if (this.isCallActive) {
                        this.endCall();
                    } else {
                        this.startCall();
                    }
                });

                this.volumeButton.addEventListener('click', () => {
                    this.toggleVolume();
                });

                this.stopButton.addEventListener('click', () => {
                    this.stopAudio();
                });
            }

            initializeVoiceRecognition() {
                if (!('webkitSpeechRecognition' in window) && !('SpeechRecognition' in window)) {
                    console.error('‚ùå Reconocimiento de voz no soportado');
                    return;
                }

                const SpeechRecognition = window.SpeechRecognition || window.webkitSpeechRecognition;
                this.recognition = new SpeechRecognition();
                
                this.recognition.continuous = true;
                this.recognition.interimResults = true;
                this.recognition.lang = 'es-ES';
                this.recognition.maxAlternatives = 1;

                this.recognition.onstart = () => {
                    console.log('üé§ Reconocimiento iniciado');
                    this.updateMicrophoneStatus(true);
                    this.updateCallStatus('üéß Luis escucha - Habla cuando quieras', 'listening');
                    this.finalTranscript = '';
                    this.interimTranscript = '';
                };

                this.recognition.onresult = (event) => {
                    this.interimTranscript = '';
                    
                    for (let i = event.resultIndex; i < event.results.length; i++) {
                        const transcript = event.results[i][0].transcript;
                        
                        if (event.results[i].isFinal) {
                            this.finalTranscript += transcript + ' ';
                        } else {
                            this.interimTranscript += transcript;
                        }
                    }
                    
                    const currentText = this.finalTranscript + this.interimTranscript;
                    if (currentText.trim()) {
                        this.transcriptContent.textContent = `üé§ "${currentText.trim()}"`;
                    }
                    
                    clearTimeout(this.silenceTimer);
                    this.silenceTimer = setTimeout(() => {
                        if (this.finalTranscript.trim()) {
                            this.processUserInput();
                        }
                    }, 1500);
                };

                this.recognition.onerror = (event) => {
                    console.warn('‚ùå Error reconocimiento:', event.error);
                    clearTimeout(this.silenceTimer);
                    this.updateMicrophoneStatus(false);
                    
                    if (this.isCallActive && !this.isLuisSpeaking) {
                        setTimeout(() => this.activateMicrophone(), 1000);
                    }
                };

                this.recognition.onend = () => {
                    console.log('üîö Reconocimiento terminado');
                    this.updateMicrophoneStatus(false);
                    
                    if (this.finalTranscript.trim()) {
                        this.processUserInput();
                    } else if (this.isCallActive && !this.isLuisSpeaking && !this.isProcessingResponse) {
                        setTimeout(() => this.activateMicrophone(), 500);
                    }
                };
            }

            activateMicrophone() {
                if (!this.isCallActive || this.isLuisSpeaking || this.isProcessingResponse || this.isMicrophoneActive) {
                    return;
                }

                console.log('üé§ Activando micr√≥fono...');
                
                try {
                    this.recognition.start();
                } catch (error) {
                    console.error('Error activando micr√≥fono:', error);
                    setTimeout(() => this.activateMicrophone(), 1000);
                }
            }

            deactivateMicrophone() {
                console.log('üîá Desactivando micr√≥fono...');
                
                clearTimeout(this.silenceTimer);
                clearTimeout(this.microphoneTimer);
                
                this.updateMicrophoneStatus(false);
                
                if (this.recognition) {
                    try {
                        this.recognition.stop();
                    } catch (e) {
                        // Ignorar errores
                    }
                }
                
                this.finalTranscript = '';
                this.interimTranscript = '';
            }

            async processUserInput() {
                const userMessage = this.finalTranscript.trim();
                if (!userMessage) return;

                console.log('üß† Procesando:', userMessage);
                
                this.deactivateMicrophone();
                this.addToConversation(userMessage, 'customer');
                this.interactionCount++;
                this.interactionsEl.textContent = this.interactionCount;
                
                this.isProcessingResponse = true;
                this.updateCallStatus('‚ö° Luis IA procesando...', 'processing');
                this.luisStatusEl.textContent = 'Procesando';

                const startTime = performance.now();

                try {
                    const response = await this.generateResponse(userMessage);
                    const endTime = performance.now();
                    const responseTime = Math.round(endTime - startTime);
                    
                    this.responseTimeEl.textContent = `${responseTime}ms`;
                    this.addToConversation(response, 'luis');
                    
                    this.isProcessingResponse = false;
                    
                    if (this.isGoodbyeMessage(response)) {
                        await this.speakResponse(response);
                        setTimeout(() => {
                            this.endCall();
                        }, 2000);
                    } else {
                        await this.speakResponse(response);
                    }
                    
                } catch (error) {
                    console.error('Error procesando:', error);
                    this.isProcessingResponse = false;
                    const fallbackResponse = 'Disculpa, ¬øpodr√≠as repetir eso?';
                    this.addToConversation(fallbackResponse, 'luis');
                    await this.speakResponse(fallbackResponse);
                }
            }

            isGoodbyeMessage(message) {
                const goodbyeKeywords = [
                    'muchas gracias por confiar',
                    'que tengas excelente d√≠a',
                    'hasta pronto',
                    'gracias por contactar techstore',
                    'llega ma√±ana',
                    'coordino la entrega',
                    'confirmada la compra'
                ];
                
                const lowerMessage = message.toLowerCase();
                return goodbyeKeywords.some(keyword => lowerMessage.includes(keyword));
            }

            async generateResponse(userMessage) {
                const url = `https://generativelanguage.googleapis.com/v1/models/gemini-1.5-flash:generateContent?key=${this.GEMINI_API_KEY}`;
                
                let conversationContext = '';
                
                if (this.conversationHistory.length > 0) {
                    conversationContext = this.conversationHistory.slice(-4).map(entry => 
                        `${entry.speaker === 'customer' ? 'Cliente' : 'Luis'}: ${entry.message}`
                    ).join('\n');
                }
                
                const requestBody = {
                    contents: [{
                        parts: [{
                            text: `Eres Luis Mart√≠nez, vendedor EXPERTO de TechStore Bogot√° con 15 a√±os de experiencia. 

CONTEXTO: Cliente escribi√≥ por Instagram de TechStore. Ya estableciste contacto inicial.

CONVERSACI√ìN PREVIA:
${conversationContext}

REGLAS CR√çTICAS PARA ELEVENLABS:
- Especificaciones t√©cnicas: "ciento veintiocho gigabytes" NO "128GB"
- C√°mara: "cuarenta y ocho megap√≠xeles" NO "48MP"
- Memoria: "diecis√©is gigabytes" NO "16GB"
- Procesador: "Intel i-siete" NO "i7"
- Precios: "dos millones trescientos mil pesos" (SOLO dinero lleva "pesos")
- N√∫meros t√©cnicos: "catorce" NO "catorce pesos"
- Meses: "veinticuatro meses" NO "veinticuatro pesos meses"

PERSONALIDAD:
- Vendedor humano real (NUNCA mencionar "IA" o "inteligencia artificial")
- Natural y conversacional
- Enfocado en cerrar ventas
- NO repetir constantemente el modelo del producto
- NO insistir con ofertas despu√©s de mencionarlas UNA vez
- Asistir activamente para que compre

PRODUCTOS DESTACADOS:
- ASUS ROG G14: Perfecta para creaci√≥n de contenido (2,350,000 pesos)
- MacBook Air M2: Para profesionales (2,800,000 pesos)  
- iPhone 14: C√°mara profesional (2,150,000 pesos)
- Samsung S23: Mejor valor (1,850,000 pesos)

DESPEDIDA AUTOM√ÅTICA:
Si el cliente confirma la compra (dice "s√≠, la quiero", "procedamos", etc.):
- Confirma datos de entrega
- Dile al cliente que te env√≠e la informaci√≥n que falta por whatsapp
- Agradece profesionalmente  
- Desp√≠dete c√°lidamente
- Ejemplo: "¬°Perfecto! Tu [producto] llega ma√±ana entre 2-4 PM. ¬°Muchas gracias por confiar en TechStore! Que tengas excelente d√≠a. ¬°Hasta pronto!"

TU MISI√ìN:
Progresa naturalmente hacia el cierre. Si ya confirm√≥ compra, DESP√çDETE. No repitas informaci√≥n. M√°ximo 60 palabras, natural y efectivo.

Cliente dice: "${userMessage}"

Responde como Luis vendedor experto:`
                        }]
                    }],
                    generationConfig: {
                        temperature: 0.7,
                        topK: 30,
                        topP: 0.85,
                        maxOutputTokens: 100,
                    }
                };

                try {
                    const controller = new AbortController();
                    setTimeout(() => controller.abort(), 4000);
                    
                    const response = await fetch(url, {
                        method: 'POST',
                        headers: { 'Content-Type': 'application/json' },
                        body: JSON.stringify(requestBody),
                        signal: controller.signal
                    });

                    if (response.ok) {
                        const data = await response.json();
                        const rawResponse = data.candidates[0].content.parts[0].text.trim();
                        
                        const optimizedResponse = this.optimizeForElevenLabs(rawResponse);
                        
                        return optimizedResponse;
                    } else {
                        throw new Error('Gemini error');
                    }
                } catch (error) {
                    console.warn('Gemini timeout, usando fallback:', error);
                    return this.getExpertFallbackResponse(userMessage);
                }
            }

            optimizeForElevenLabs(text) {
                let optimized = text;
                
                // PRECIOS (Solo dinero lleva "pesos")
                optimized = optimized.replace(/(\d{1,3}(?:[.,]\d{3})*)\s*mil(?:\s*pesos)?/gi, (match, number) => {
                    const num = parseInt(number.replace(/[.,]/g, '')) * 1000;
                    return this.numberToSpanishWords(num) + ' pesos';
                });
                
                optimized = optimized.replace(/\$?\s*(\d{1,3}(?:[.,]\d{3})*(?:[.,]\d{3})*)/g, (match, number) => {
                    const cleanNumber = parseInt(number.replace(/[$.,]/g, ''));
                    if (cleanNumber > 10000) { // Solo n√∫meros grandes son precios
                        return this.numberToSpanishWords(cleanNumber) + ' pesos';
                    }
                    return this.numberToSpanishWords(cleanNumber); // N√∫meros peque√±os sin "pesos"
                });
                
                // ESPECIFICACIONES T√âCNICAS (Sin "pesos")
                optimized = optimized.replace(/(\d+)\s*GB/gi, (match, number) => {
                    return this.numberToSpanishWords(parseInt(number)) + ' gigabytes';
                });
                
                optimized = optimized.replace(/(\d+)\s*MP/gi, (match, number) => {
                    return this.numberToSpanishWords(parseInt(number)) + ' megap√≠xeles';
                });
                
                // MESES (Sin "pesos")
                optimized = optimized.replace(/(\d+)\s*meses?/gi, (match, number) => {
                    return this.numberToSpanishWords(parseInt(number)) + ' meses';
                });
                
                // A√ëOS (Sin "pesos") 
                optimized = optimized.replace(/(\d+)\s*a√±os?/gi, (match, number) => {
                    return this.numberToSpanishWords(parseInt(number)) + ' a√±os';
                });
                
                // PROCESADORES
                optimized = optimized.replace(/i(\d+)/gi, 'i-$1');
                optimized = optimized.replace(/RTX\s*(\d+)/gi, 'RTX $1');
                
                return optimized;
            }

            numberToSpanishWords(number) {
                if (number === 0) return 'cero';
                if (number === 100) return 'cien';
                
                const ones = ['', 'uno', 'dos', 'tres', 'cuatro', 'cinco', 'seis', 'siete', 'ocho', 'nueve'];
                const teens = ['diez', 'once', 'doce', 'trece', 'catorce', 'quince', 'diecis√©is', 'diecisiete', 'dieciocho', 'diecinueve'];
                const tens = ['', '', 'veinte', 'treinta', 'cuarenta', 'cincuenta', 'sesenta', 'setenta', 'ochenta', 'noventa'];
                const hundreds = ['', 'ciento', 'doscientos', 'trescientos', 'cuatrocientos', 'quinientos', 'seiscientos', 'setecientos', 'ochocientos', 'novecientos'];
                
                if (number < 10) return ones[number];
                
                if (number < 20) return teens[number - 10];
                
                if (number < 30) {
                    return number === 20 ? 'veinte' : 'veinti' + ones[number % 10];
                }
                
                if (number < 100) {
                    return tens[Math.floor(number / 10)] + (number % 10 > 0 ? ' y ' + ones[number % 10] : '');
                }
                
                if (number < 1000) {
                    const hundred = Math.floor(number / 100);
                    const remainder = number % 100;
                    return hundreds[hundred] + (remainder > 0 ? ' ' + this.numberToSpanishWords(remainder) : '');
                }
                
                if (number < 1000000) {
                    const thousands = Math.floor(number / 1000);
                    const remainder = number % 1000;
                    const thousandsText = thousands === 1 ? 'mil' : this.numberToSpanishWords(thousands) + ' mil';
                    return thousandsText + (remainder > 0 ? ' ' + this.numberToSpanishWords(remainder) : '');
                }
                
                // Millones
                const millions = Math.floor(number / 1000000);
                const remainder = number % 1000000;
                const millionsText = millions === 1 ? 'un mill√≥n' : this.numberToSpanishWords(millions) + ' millones';
                return millionsText + (remainder > 0 ? ' ' + this.numberToSpanishWords(remainder) : '');
            }

            getExpertFallbackResponse(userMessage) {
                const msg = userMessage.toLowerCase();
                
                if (msg.includes('s√≠') && (msg.includes('quiero') || msg.includes('comprar'))) {
                    return '¬°Excelente decisi√≥n! Dame tu nombre completo y direcci√≥n en Bogot√°. Llega entre veinticuatro y cuarenta y ocho horas con entrega gratis. ¬°Muchas gracias por confiar en TechStore! Que tengas excelente d√≠a.';
                }
                
                if (msg.includes('precio') && msg.includes('laptop')) {
                    return 'Para creaci√≥n de contenido recomiendo la ASUS ROG G catorce. Excelente procesador y tarjeta gr√°fica, doscientos cincuenta y seis gigabytes de almacenamiento. Precio: dos millones trescientos cincuenta mil pesos con financiaci√≥n disponible. ¬øTe parece bien?';
                }
                
                const expertResponses = [
                    'Como especialista con quince a√±os en tecnolog√≠a, tengo exactamente lo que buscas. Cu√©ntame m√°s detalles para hacer la recomendaci√≥n perfecta.',
                    'Perfecto. He asesorado a miles de clientes. Dame m√°s informaci√≥n sobre el uso principal para recomendarte lo mejor.',
                    'Excelente consulta. ¬øPara qu√© lo necesitas principalmente? As√≠ te ayudo mejor.'
                ];
                
                return expertResponses[Math.floor(Math.random() * expertResponses.length)];
            }

            async speakResponse(text) {
                console.log('üó£Ô∏è Luis hablando:', text);
                
                this.isLuisSpeaking = true;
                this.updateCallStatus('üó£Ô∏è Luis IA hablando...', 'speaking');
                this.luisStatusEl.textContent = 'Hablando';
                this.audioVisualizer.classList.add('active');
                this.transcriptContent.textContent = `Luis: "${text}"`;
                
                this.deactivateMicrophone();

                try {
                    const response = await fetch(`https://api.elevenlabs.io/v1/text-to-speech/${this.ELEVENLABS_VOICE_ID}`, {
                        method: 'POST',
                        headers: {
                            'Accept': 'audio/mpeg',
                            'Content-Type': 'application/json',
                            'xi-api-key': this.ELEVENLABS_API_KEY
                        },
                        body: JSON.stringify({
                            text: text,
                            model_id: "eleven_turbo_v2_5",
                            voice_settings: {
                                stability: 0.65,
                                similarity_boost: 0.75,
                                style: 0.4
                            }
                        })
                    });

                    if (response.ok) {
                        const audioBlob = await response.blob();
                        const audioUrl = URL.createObjectURL(audioBlob);
                        this.currentAudio = new Audio(audioUrl);
                        this.currentAudio.volume = this.volume;
                        
                        this.currentAudio.onended = () => {
                            console.log('‚úÖ Luis termin√≥ de hablar');
                            URL.revokeObjectURL(audioUrl);
                            this.currentAudio = null;
                            this.isLuisSpeaking = false;
                            this.audioVisualizer.classList.remove('active');
                            this.luisStatusEl.textContent = 'Escuchando';
                            this.transcriptContent.textContent = 'üé§ Luis termin√≥ - Tu turno';
                            
                            if (this.isCallActive && !this.isGoodbyeMessage(text)) {
                                this.microphoneTimer = setTimeout(() => {
                                    this.activateMicrophone();
                                }, 1000);
                            }
                        };
                        
                        await this.currentAudio.play();
                        
                    } else {
                        throw new Error('ElevenLabs error');
                    }
                    
                } catch (error) {
                    console.error('Error ElevenLabs:', error);
                    this.speakWithBrowser(text);
                }
            }

            speakWithBrowser(text) {
                if ('speechSynthesis' in window) {
                    const utterance = new SpeechSynthesisUtterance(text);
                    utterance.lang = 'es-ES';
                    utterance.volume = this.volume;
                    
                    utterance.onend = () => {
                        console.log('‚úÖ Luis termin√≥ de hablar (navegador)');
                        this.isLuisSpeaking = false;
                        this.audioVisualizer.classList.remove('active');
                        this.luisStatusEl.textContent = 'Escuchando';
                        this.transcriptContent.textContent = 'üé§ Luis termin√≥ - Tu turno';
                        
                        if (this.isCallActive) {
                            this.microphoneTimer = setTimeout(() => {
                                this.activateMicrophone();
                            }, 1000);
                        }
                    };
                    
                    speechSynthesis.speak(utterance);
                } else {
                    this.isLuisSpeaking = false;
                    this.audioVisualizer.classList.remove('active');
                    this.transcriptContent.textContent = 'Sin audio - Tu turno';
                    
                    if (this.isCallActive) {
                        setTimeout(() => this.activateMicrophone(), 500);
                    }
                }
            }

            async startCall() {
                console.log('üìû Iniciando llamada...');
                
                this.isCallActive = true;
                this.callStartTime = new Date();
                this.callButton.innerHTML = '<i class="fas fa-phone-slash"></i> Finalizar Llamada';
                this.callButton.classList.add('active');
                this.stopButton.style.display = 'inline-block';
                
                this.updateCallStatus('üìû Llamada conectada', 'connected');
                this.luisStatusEl.textContent = 'Iniciando';
                
                // Limpiar historial
                this.conversationHistory.innerHTML = `
                    <h3 style="color: var(--tech-glow); margin-bottom: 15px; text-align: center;">
                        <i class="fas fa-history"></i> Historial de Conversaci√≥n
                    </h3>
                `;
                
                this.startCallDuration();
                
                const greeting = '¬°Hola! Buen d√≠a, habla Luis Mart√≠nez de TechStore. Vi que escribiste por nuestro Instagram mostrando inter√©s en tecnolog√≠a. Me da mucho gusto contactarte personalmente para asesorarte. Cu√©ntame, ¬øqu√© tipo de equipo tienes en mente?';
                
                this.addToConversation(greeting, 'luis');
                
                await this.speakResponse(greeting);
            }

            endCall() {
                console.log('üìû Finalizando llamada...');
                
                this.isCallActive = false;
                this.isLuisSpeaking = false;
                this.isProcessingResponse = false;
                
                this.callButton.innerHTML = '<i class="fas fa-phone"></i> Iniciar Llamada';
                this.callButton.classList.remove('active');
                this.stopButton.style.display = 'none';
                
                this.deactivateMicrophone();
                this.stopAudio();
                
                clearTimeout(this.microphoneTimer);
                clearInterval(this.durationInterval);
                
                this.updateCallStatus('üìû Llamada finalizada', 'waiting');
                this.luisStatusEl.textContent = 'Disponible';
                this.transcriptContent.textContent = 'Llamada terminada. ¬°Gracias por contactar TechStore!';
            }

            startCallDuration() {
                this.durationInterval = setInterval(() => {
                    if (this.callStartTime) {
                        const now = new Date();
                        const duration = Math.floor((now - this.callStartTime) / 1000);
                        const minutes = Math.floor(duration / 60);
                        const seconds = duration % 60;
                        this.callDurationEl.textContent = `${minutes.toString().padStart(2, '0')}:${seconds.toString().padStart(2, '0')}`;
                    }
                }, 1000);
            }

            stopAudio() {
                if (this.currentAudio) {
                    this.currentAudio.pause();
                    this.currentAudio.currentTime = 0;
                    this.currentAudio = null;
                }
                
                if ('speechSynthesis' in window) {
                    speechSynthesis.cancel();
                }
                
                this.isLuisSpeaking = false;
                this.audioVisualizer.classList.remove('active');
            }

            toggleVolume() {
                if (this.volume > 0.5) {
                    this.volume = 0.3;
                    this.volumeButton.innerHTML = '<i class="fas fa-volume-down"></i> Volumen: Medio';
                } else if (this.volume > 0.1) {
                    this.volume = 0;
                    this.volumeButton.innerHTML = '<i class="fas fa-volume-mute"></i> Volumen: Mudo';
                } else {
                    this.volume = 0.8;
                    this.volumeButton.innerHTML = '<i class="fas fa-volume-up"></i> Volumen: Alto';
                }
                
                if (this.currentAudio) {
                    this.currentAudio.volume = this.volume;
                }
            }

            updateCallStatus(message, type) {
                this.callStatus.innerHTML = message;
                this.callStatus.className = `call-status ${type}`;
            }

            updateMicrophoneStatus(active) {
                this.isMicrophoneActive = active;
                this.micIndicator.className = `microphone-indicator ${active ? 'active' : ''}`;
            }

            addToConversation(message, speaker) {
                const conversationItem = document.createElement('div');
                conversationItem.className = `conversation-item ${speaker}`;
                
                const label = document.createElement('div');
                label.className = 'speaker-label';
                label.textContent = speaker === 'customer' ? 'Cliente' : 'Luis IA';
                
                const content = document.createElement('div');
                content.textContent = message;
                
                conversationItem.appendChild(label);
                conversationItem.appendChild(content);
                
                this.conversationHistory.appendChild(conversationItem);
                this.conversationHistory.scrollTop = this.conversationHistory.scrollHeight;
                
                // Detectar nombre del cliente
                if (speaker === 'customer' && !this.clientName) {
                    const nameMatch = message.match(/soy\s+(\w+)|me\s+llamo\s+(\w+)|mi\s+nombre\s+es\s+(\w+)/i);
                    if (nameMatch) {
                        this.clientName = nameMatch[1] || nameMatch[2] || nameMatch[3];
                    }
                }
                
                this.conversationHistory.push({
                    speaker: speaker,
                    message: message,
                    timestamp: new Date()
                });
                
                if (this.conversationHistory.length > 10) {
                    this.conversationHistory = this.conversationHistory.slice(-10);
                }
            }
        }

        // Inicializar sistema cuando la p√°gina carga
        document.addEventListener('DOMContentLoaded', () => {
            new LuisTechSystem();
        });